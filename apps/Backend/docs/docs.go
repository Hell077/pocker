// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with email and password, return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_auth_dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_auth_dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return info about authorized user",
                "tags": [
                    "Auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_auth_dto.Me"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access token from refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_modules_auth_handler.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_auth_dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "registered",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "registration failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/daily-reward": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the daily reward for the user (creates it if not exists)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily-reward"
                ],
                "summary": "Claim daily reward",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/poker_packages_database.Reward"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/daily-reward/cooldown": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the time (in seconds) left until the user can claim the next daily reward.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily-reward"
                ],
                "summary": "Get time until next daily reward",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_daily_rewards_dto.GetTime"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/daily-reward/wheel": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the list of possible rewards in the daily wheel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily-reward"
                ],
                "summary": "Get wheel reward list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/poker_packages_database.CurrentDayRewardItem"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/room/action": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Отправка действия игрока в Temporal воркфлоу",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Игровое действие",
                "parameters": [
                    {
                        "description": "Действие игрока",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_room_dto.PlayerActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/room/available-actions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает список допустимых ходов на текущий момент",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Получение доступных действий игрока",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID комнаты",
                        "name": "roomID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID игрока",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/room/create-room": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создаёт новую покерную комнату с заданными параметрами",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Создание комнаты",
                "parameters": [
                    {
                        "description": "Параметры комнаты",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_room_dto.CreateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Комната успешно создана",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или тела запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/room/deal-cards": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Отправляет сигнал в Temporal для раздачи карт",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Раздача карт",
                "parameters": [
                    {
                        "description": "ID комнаты",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_room_dto.StartGameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/room/start-game": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Меняет статус комнаты на playing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Запуск игры",
                "parameters": [
                    {
                        "description": "ID комнаты",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poker_internal_modules_room_dto.StartGameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/room/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Устанавливает WebSocket-соединение с покерной комнатой. Требуется ` + "`" + `roomID` + "`" + ` и ` + "`" + `userID` + "`" + ` как query-параметры.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Подключение к комнате по WebSocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID комнаты",
                        "name": "roomID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID пользователя",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "WebSocket Upgrade",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/stats/table": {
            "get": {
                "description": "Возвращает список пользователей с их ELO, винрейтом и количеством игр",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Получение таблицы рейтингов (Elo-таблица)",
                "responses": {
                    "200": {
                        "description": "Успешный ответ с рейтингом",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/poker_internal_modules_stats_dto.EloTable"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении данных",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Map": {
            "type": "object",
            "additionalProperties": true
        },
        "internal_modules_auth_handler.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "your_refresh_token_here"
                }
            }
        },
        "poker_internal_modules_auth_dto.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword"
                }
            }
        },
        "poker_internal_modules_auth_dto.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "access.jwt.token"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "refresh.jwt.token"
                }
            }
        },
        "poker_internal_modules_auth_dto.Me": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "poker_internal_modules_auth_dto.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "poker_internal_modules_daily_rewards_dto.GetTime": {
            "type": "object",
            "properties": {
                "cooldown_seconds": {
                    "type": "integer"
                }
            }
        },
        "poker_internal_modules_room_dto.CreateRoomRequest": {
            "type": "object",
            "required": [
                "max_players"
            ],
            "properties": {
                "limits": {
                    "description": "Например, \"1/2\" или \"5/10\"",
                    "type": "string"
                },
                "max_players": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 2
                },
                "type": {
                    "description": "\"cash\", \"sitngo\", \"mtt\"",
                    "type": "string"
                }
            }
        },
        "poker_internal_modules_room_dto.PlayerActionRequest": {
            "type": "object",
            "required": [
                "activity",
                "roomID",
                "userID"
            ],
            "properties": {
                "activity": {
                    "type": "string"
                },
                "roomID": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "poker_internal_modules_room_dto.StartGameRequest": {
            "type": "object",
            "required": [
                "roomID"
            ],
            "properties": {
                "roomID": {
                    "type": "string"
                }
            }
        },
        "poker_internal_modules_stats_dto.EloTable": {
            "type": "object",
            "properties": {
                "elo": {
                    "type": "integer"
                },
                "games": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "win_rate": {
                    "type": "number"
                }
            }
        },
        "poker_packages_database.CurrentDayRewardItem": {
            "type": "object",
            "properties": {
                "currentDayRewardID": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reward": {
                    "type": "integer"
                }
            }
        },
        "poker_packages_database.Reward": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "claimedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rewardDate": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Poker API",
	Description:      "API documentation for Poker service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
