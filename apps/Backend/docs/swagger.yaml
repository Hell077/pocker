basePath: /api
definitions:
  fiber.Map:
    additionalProperties: true
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_modules_auth_handler.RefreshTokenRequest:
    properties:
      refresh_token:
        example: your_refresh_token_here
        type: string
    type: object
  poker_internal_modules_auth_dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword
        type: string
    type: object
  poker_internal_modules_auth_dto.LoginResponse:
    properties:
      access_token:
        example: access.jwt.token
        type: string
      refresh_token:
        example: refresh.jwt.token
        type: string
    type: object
  poker_internal_modules_auth_dto.Me:
    properties:
      balance:
        type: integer
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  poker_internal_modules_auth_dto.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword
        type: string
      username:
        example: username
        type: string
    type: object
  poker_internal_modules_daily_rewards_dto.GetTime:
    properties:
      cooldown_seconds:
        type: integer
    type: object
  poker_internal_modules_room_dto.AvailableRoomListResponse:
    properties:
      rooms:
        items:
          $ref: '#/definitions/poker_packages_database.Room'
        type: array
    type: object
  poker_internal_modules_room_dto.CreateRoomRequest:
    properties:
      limits:
        description: Например, "1/2" или "5/10"
        type: string
      max_players:
        maximum: 10
        minimum: 2
        type: integer
      name:
        type: string
      type:
        description: '"cash", "sitngo", "mtt"'
        type: string
    required:
    - max_players
    type: object
  poker_internal_modules_room_dto.PlayerActionRequest:
    properties:
      activity:
        type: string
      args:
        description: "\U0001F195 добавь это поле"
        items:
          type: string
        type: array
      room_id:
        type: string
      user_id:
        type: string
    type: object
  poker_internal_modules_room_dto.StartGameRequest:
    properties:
      roomID:
        type: string
    required:
    - roomID
    type: object
  poker_internal_modules_stats_dto.EloTable:
    properties:
      elo:
        type: integer
      games:
        type: integer
      username:
        type: string
      win_rate:
        type: number
    type: object
  poker_packages_database.Account:
    properties:
      accountBalance:
        $ref: '#/definitions/poker_packages_database.AccountBalance'
      avatarLink:
        type: string
      createdAt:
        type: integer
      email:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        description: user / admin / moderator
        type: string
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  poker_packages_database.AccountBalance:
    properties:
      currentBalance:
        type: string
      id:
        type: string
      user:
        $ref: '#/definitions/poker_packages_database.Account'
      userID:
        type: string
    type: object
  poker_packages_database.CurrentDayRewardItem:
    properties:
      currentDayRewardID:
        type: string
      id:
        type: string
      reward:
        type: integer
    type: object
  poker_packages_database.Reward:
    properties:
      amount:
        type: integer
      claimedAt:
        type: string
      id:
        type: string
      rewardDate:
        type: string
      userID:
        type: string
    type: object
  poker_packages_database.Room:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      limits:
        description: например "1/2", "5/10"
        type: string
      maxPlayers:
        type: integer
      name:
        type: string
      roomID:
        type: string
      status:
        description: waiting / playing / finished
        type: string
      type:
        description: '"cash" / "sitngo" / "mtt"'
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/poker_packages_database.Account'
        type: array
    type: object
info:
  contact: {}
  description: API documentation for Poker service.
  title: Poker API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password, return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_auth_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/poker_internal_modules_auth_dto.LoginResponse'
        "400":
          description: invalid input
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /auth/me:
    get:
      description: Return info about authorized user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/poker_internal_modules_auth_dto.Me'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token from refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/internal_modules_auth_handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_auth_dto.RegisterRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: registered
          schema:
            type: string
        "400":
          description: invalid input
          schema:
            type: string
        "500":
          description: registration failed
          schema:
            type: string
      summary: Register new user
      tags:
      - Auth
  /daily-reward:
    post:
      description: Returns the daily reward for the user (creates it if not exists)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/poker_packages_database.Reward'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/fiber.Map'
      security:
      - BearerAuth: []
      summary: Claim daily reward
      tags:
      - daily-reward
  /daily-reward/cooldown:
    get:
      description: Returns the time (in seconds) left until the user can claim the
        next daily reward.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/poker_internal_modules_daily_rewards_dto.GetTime'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/fiber.Map'
      security:
      - BearerAuth: []
      summary: Get time until next daily reward
      tags:
      - daily-reward
  /daily-reward/wheel:
    get:
      description: Returns the list of possible rewards in the daily wheel
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/poker_packages_database.CurrentDayRewardItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/fiber.Map'
      security:
      - BearerAuth: []
      summary: Get wheel reward list
      tags:
      - daily-reward
  /room/action:
    post:
      consumes:
      - application/json
      description: Отправка действия игрока в Temporal воркфлоу
      parameters:
      - description: Действие игрока
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_room_dto.PlayerActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Игровое действие
      tags:
      - Room
  /room/available-actions:
    get:
      consumes:
      - application/json
      description: Возвращает список допустимых ходов на текущий момент
      parameters:
      - description: ID комнаты
        in: query
        name: roomID
        required: true
        type: string
      - description: ID игрока
        in: query
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      security:
      - BearerAuth: []
      summary: Получение доступных действий игрока
      tags:
      - Room
  /room/create-room:
    post:
      consumes:
      - application/json
      description: Создаёт новую покерную комнату с заданными параметрами
      parameters:
      - description: Параметры комнаты
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_room_dto.CreateRoomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Комната успешно создана
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка валидации или тела запроса
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Создание комнаты
      tags:
      - Room
  /room/deal-cards:
    post:
      consumes:
      - application/json
      description: Отправляет сигнал в Temporal для раздачи карт
      parameters:
      - description: ID комнаты
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_room_dto.StartGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Раздача карт
      tags:
      - Room
  /room/list:
    get:
      consumes:
      - application/json
      description: Возвращает список комнат со статусом "waiting"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/poker_internal_modules_room_dto.AvailableRoomListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/fiber.Map'
      security:
      - BearerAuth: []
      summary: Получить список доступных комнат
      tags:
      - Room
  /room/start-game:
    post:
      consumes:
      - application/json
      description: Меняет статус комнаты на playing
      parameters:
      - description: ID комнаты
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/poker_internal_modules_room_dto.StartGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Запуск игры
      tags:
      - Room
  /room/ws:
    get:
      description: Устанавливает WebSocket-соединение с покерной комнатой. Требуется
        `roomID` как query-параметр.
      parameters:
      - description: ID комнаты
        in: query
        name: roomID
        required: true
        type: string
      - description: ID пользователя
        in: query
        name: userID
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "101":
          description: WebSocket Upgrade
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "426":
          description: Upgrade Required
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Подключение к комнате по WebSocket
      tags:
      - Room
  /stats/table:
    get:
      consumes:
      - application/json
      description: Возвращает список пользователей с их ELO, винрейтом и количеством
        игр
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с рейтингом
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/poker_internal_modules_stats_dto.EloTable'
              type: array
            type: object
        "500":
          description: Ошибка при получении данных
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение таблицы рейтингов (Elo-таблица)
      tags:
      - Stats
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
