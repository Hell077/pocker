basePath: /api
definitions:
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword
        type: string
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: access.jwt.token
        type: string
      refresh_token:
        example: refresh.jwt.token
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword
        type: string
    type: object
  internal_modules_auth_handler.RefreshTokenRequest:
    properties:
      refresh_token:
        example: your_refresh_token_here
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Poker service.
  title: Poker API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password, return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: invalid input
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /auth/me:
    get:
      description: Return info about authorized user
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token from refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/internal_modules_auth_handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: registered
          schema:
            type: string
        "400":
          description: invalid input
          schema:
            type: string
        "500":
          description: registration failed
          schema:
            type: string
      summary: Register new user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
