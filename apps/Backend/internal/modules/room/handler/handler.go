package handler

import (
	"context"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
	"go.uber.org/zap"
	"poker/internal/modules/room/dto"
	"poker/internal/modules/room/service"
)

type RoomHandler struct {
	service service.RoomService
	logger  *zap.Logger
}

func NewRoomHandler(s *service.RoomService, logger *zap.Logger) *RoomHandler {
	return &RoomHandler{
		service: *s,
		logger:  logger,
	}

}

// CreateRoom godoc
// @Summary      –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
// @Description  –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–Ω–∞—Ç—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
// @Tags         Room
// @Accept       json
// @Produce      json
// @Param        room  body  dto.CreateRoomRequest  true  "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç—ã"
// @Success      201  {object}  map[string]interface{}  "–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
// @Failure      400  {object}  map[string]interface{}  "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞"
// @Failure      500  {object}  map[string]interface{}  "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
// @Router       /room/create-room [post]
func (h *RoomHandler) CreateRoom(c *fiber.Ctx) error {
	var req dto.CreateRoomRequest
	var ctx context.Context
	if err := c.BodyParser(&req); err != nil {
		h.logger.Warn("Invalid request body", zap.Error(err))
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "invalid request body",
		})
	}

	if req.RoomID == "" || req.MaxPlayers < 2 || req.MaxPlayers > 10 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "invalid room data",
		})
	}

	err := h.service.CreateRoom(ctx, dto.CreateRoomRequest{})
	if err != nil {
		h.logger.Error("Failed to create room", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "failed to create room",
		})
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"message": "room created",
		"room_id": req.RoomID,
	})
}

// JoinRoom godoc
// @Summary      –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ WebSocket
// @Description  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–∫–µ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è `roomId` –≤ URL. –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
// @Tags         Room
// @Produce      plain
// @Param        roomId  path  string  true  "ID –∫–æ–º–Ω–∞—Ç—ã"
// @Success      101  {string}  string  "WebSocket Upgrade"
// @Failure      400  {object}  map[string]string  "Bad Request"
// @Failure      426  {object}  map[string]string  "Upgrade Required"
// @Router       /room/ws/{roomId} [get]
func (h *RoomHandler) JoinRoom(c *websocket.Conn) error {
	defer func() {
		h.logger.Info("üîå Disconnected", zap.String("remote", c.RemoteAddr().String()))
		c.Close()
	}()

	roomID := c.Params("roomId")
	if roomID == "" {
		h.logger.Warn("Missing roomId param")
		return c.WriteMessage(websocket.TextMessage, []byte("Missing roomId"))
	}

	h.logger.Info("‚úÖ JoinRoom", zap.String("roomId", roomID), zap.String("ip", c.RemoteAddr().String()))

	// üëâ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç—É:
	// RoomManager.AddConnection(roomID, c)

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := c.WriteMessage(websocket.TextMessage, []byte("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É: "+roomID)); err != nil {
		h.logger.Error("Write error", zap.Error(err))
		return err
	}

	// –°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	for {
		messageType, message, err := c.ReadMessage()
		if err != nil {
			h.logger.Warn("Read error", zap.Error(err))
			break
		}

		h.logger.Info("üì© Message received",
			zap.String("roomId", roomID),
			zap.ByteString("msg", message),
		)

		// –ü—Ä–∏–º–µ—Ä —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞
		if err := c.WriteMessage(messageType, message); err != nil {
			h.logger.Error("Write error", zap.Error(err))
			break
		}
	}

	return nil
}
